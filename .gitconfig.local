# add the following to your ~/.gitconfig
#
# [include]
# path = ~/.gitconfig.local

[user]
	name = Pat Sissons
	email = pat.sissons@shopify.com

[rebase]
	autosquash = true

[diff]
	algorithm = patience
	tool = diffmerge
[merge]
    tool = diffmerge
[difftool "diffmerge"]
	cmd = "/Applications/DiffMerge.app/Contents/MacOS/DiffMerge --nosplash \"$LOCAL\" \"$REMOTE\""
[mergetool "diffmerge"]
	cmd = "/Applications/DiffMerge.app/Contents/MacOS/DiffMerge --merge --result=\"$MERGED\" \"$LOCAL\" $(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi) \"$REMOTE\""
	trustexitcode = true
[difftool "sourcetree"]
	cmd = /Applications/DiffMerge.app/Contents/MacOS/DiffMerge --nosplash \"$LOCAL\" \"$REMOTE\"
	path =
[mergetool "sourcetree"]
	cmd = /Applications/DiffMerge.app/Contents/MacOS/DiffMerge --nosplash --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
	trustExitCode = true

[alias]
  # detailed history from HEAD
  audit = "log --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(yellow)%h %C(blue)%ad %C(red)%an%x09%C(reset)%s %C(green)%d'"
  # recent commit messages from HEAD
  messages = "!f() { git log --pretty=format:${1:-'%s'}; }; f"
  # amend HEAD with staged files (append -a to also include unstaged files)
  comma = "commit --amend --no-edit"
  # fixup the provided hash
  fix = "commit --fixup"
  # print current branch
  cb = "!f() { git rev-parse --abbrev-ref ${1:-HEAD}; }; f"
  # fetch (origin) and rebase (master)
  from = "!f() { git fetch ${2:-origin} --prune && git rebase ${2:-origin}/${1:-master}; }; f"
  # fetch (origin), reset hard, and rebase (master)
  rr = "!f() { git fetch ${2:-origin} --prune && git reset --hard && git rebase ${2:-origin}/${1:-master}; }; f"
  # fetch (origin), reset hard to upstream
  ru = "!f() { git fetch ${1:-origin} --prune && git reset --hard ${1:-origin}/$(git cb); }; f"
  # rebase (HEAD~1) onto (origin/master) from (current branch)
  rontom = "!f() { git rebase --onto ${2:-origin/master} ${1:-head~1} ${3:-$(git cb)}; }; f"
  # checkout latest (origin) master
  mas = "!f() { git fetch ${1:-origin} master && git branch -f master ${1:-origin}/master && git checkout master; }; f"
  # checkout latest (origin) main
  main = "!f() { git fetch ${1:-origin} main && git branch -f main ${1:-origin}/main && git checkout main; }; f"
  # checkout PR (number) to pr/(number)
  pr = "!f() { git fetch ${2:-origin} pull/${1}/head:pr/${1} && git checkout pr/${1}; }; f"
  # update current PR branch
  prup = "!f() { git fetch ${2:-origin} pull/${1:-$(git cb | cut -c4-)}/head && git reset --hard FETCH_HEAD; }; f"
  # push new branch
  pushnb = "!f() { git push ${2:-origin} --set-upstream ${1:-$(git cb)}; }; f"
  # force push
  pushf = "push --force-with-lease"
  # force push to (origin)
  pushfo = "!f() { git pushf ${1:-origin}; }; f"
  # print merged local branches
  merged = "!f() { git branch --merged ${1:-origin/master} | egrep -v '(^\\*|master)'; }; f"
  # delete merged local branches
  rm-merged = "!f() { git merged $1 | xargs git branch -d; }; f"
  # delete local pr/* branches
  rm-pr = "!f() { git for-each-ref --format='%(refname:short)' refs/heads/pr/* | egrep -v ${1:-^$} | xargs git branch -D; }; f"
  # print commit graph
  graph = "log --graph --decorate --oneline --all --simplify-by-decoration"
  # squash (branch)
  squash = "!f(){ git reset --hard ${1} && git merge --squash HEAD@{1} && git commit --file .git/SQUASH_MSG; }; f"
  # squash (n) commits
  squashn = "!f(){ git reset --hard HEAD~${1} && git merge --squash HEAD@{1} && git commit --file .git/SQUASH_MSG; }; f"
  sq = "!git squash"
  sqn = "!git squashn"
  # dev integration status
  dis = "!f(){ for repo in $(/opt/dev/bin/dev integration status | tail -n+2 | awk '$2 ~ /^enabled$/ {print $1}' | xargs echo); do echo \"\n-- $repo --\"; git -C $([ -d \"../$repo\" ] && echo \"../$repo\" || echo \"../../$repo\") status --short --branch; done }; f"
